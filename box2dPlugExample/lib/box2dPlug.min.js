/**
 * box2dPlug library
 * https://github.com/amoyeh/box2dplug
 *
 * Copyright 2016 Amo Yeh
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 */
var box2dp; !function (e) { var t = function () { function e() { this.ITEM_STATIC = 5592405, this.ITEM_DYNAMIC = 10066329, this.ITEM_ALPHA = .6, this.LINE_CENTER_X = 16759218, this.LINE_CENTER_Y = 12844978, this.LINE_BOUNDARY = 12303291, this.PATH_LINE = 9851040, this.PATH_LINEA = .4, this.PATH_FORCE = 14579479, this.PATH_FORCEA = .4, this.SELECTION_LINE_SIZE = 1, this.SELECTION_LINE_COLOR = 15724527, this.SELECTION_LINE_ALPHA = .4, this.VELOCITY = 16777215, this.VELOCITY_ALPHA = .6, this.ALIGNMENT = 5276250, this.ALIGNMENT_ALPHA = .3, this.COHESION = 5931650, this.COHESION_ALPHA = .3, this.SEPARATION = 15093840, this.SEPARATION_ALPHA = .3, this.RAYCAST = 16777215, this.RAYCAST_ALPHA = .1, this.AVOID_SHAPE = 13395558, this.AVOID_SHAPE_ALPHA = 1, this.GRID = 6750207, this.GRID_ALPHA = .1, this.SENSOR = 16768392, this.SENSOR_ALPHA = .3, this.BOUND = 5622988, this.BOUND_ALPHA = .5, this.WANDER = 9868950, this.WANDER_ALPHA = .3, this.QUADTREE = 5622988, this.QUADTREE_A = .8, this.LINE_JOINT = 13382400 } return e.DarkTheme = function () { var t = new e; return t.ITEM_STATIC = 4802889, t.ITEM_DYNAMIC = 8421504, t.ITEM_ALPHA = .5, t.LINE_CENTER_X = 16756121, t.LINE_CENTER_Y = 11403161, t.LINE_BOUNDARY = 7297135, t.PATH_LINE = 9851040, t.PATH_LINEA = .4, t.PATH_FORCE = 14579479, t.PATH_FORCEA = .4, t.SELECTION_LINE_SIZE = 1, t.SELECTION_LINE_COLOR = 15724527, t.SELECTION_LINE_ALPHA = .4, t.VELOCITY = 16777215, t.VELOCITY_ALPHA = .6, t.ALIGNMENT = 5276250, t.ALIGNMENT_ALPHA = .3, t.COHESION = 5931650, t.COHESION_ALPHA = .3, t.SEPARATION = 15093840, t.SEPARATION_ALPHA = .3, t.RAYCAST = 16777215, t.RAYCAST_ALPHA = .1, t.AVOID_SHAPE = 13395558, t.AVOID_SHAPE_ALPHA = 1, t.GRID = 6750207, t.GRID_ALPHA = .1, t.SENSOR = 16768392, t.SENSOR_ALPHA = .3, t.BOUND = 5622988, t.BOUND_ALPHA = .5, t.WANDER = 9868950, t.WANDER_ALPHA = .3, t.QUADTREE = 5622988, t.QUADTREE_A = .2, t }, e.prototype.getItemStaticColor = function () { return this.ITEM_STATIC }, e.prototype.getItemDynamicColor = function () { return this.ITEM_DYNAMIC }, e.prototype.getItemStaticMat = function () { return new THREE.MeshBasicMaterial({ color: this.ITEM_STATIC, side: THREE.DoubleSide, opacity: this.ITEM_ALPHA, transparent: !0 }) }, e.prototype.getItemDynamicMat = function () { return new THREE.MeshBasicMaterial({ color: this.ITEM_DYNAMIC, side: THREE.DoubleSide, opacity: this.ITEM_ALPHA, transparent: !0 }) }, e.prototype.getLineMatStatic = function () { return new THREE.LineBasicMaterial({ color: this.ITEM_STATIC, side: THREE.DoubleSide, opacity: this.ITEM_ALPHA, transparent: !0, linewidth: 1 }) }, e.prototype.getLineMatDynamic = function () { return new THREE.LineBasicMaterial({ color: this.ITEM_DYNAMIC, side: THREE.DoubleSide, opacity: this.ITEM_ALPHA, transparent: !0, linewidth: 1 }) }, e.prototype.getSensorMat = function () { return new THREE.MeshBasicMaterial({ color: this.SENSOR, side: THREE.DoubleSide, opacity: this.SENSOR_ALPHA, transparent: !0 }) }, e.prototype.getLineCenterXMat = function () { return new THREE.LineBasicMaterial({ color: this.LINE_CENTER_X }) }, e.prototype.getLineCenterYMat = function () { return new THREE.LineBasicMaterial({ color: this.LINE_CENTER_Y }) }, e.prototype.getLineBoundary = function () { return new THREE.LineDashedMaterial({ color: this.LINE_BOUNDARY, dashSize: 10, gapSize: 5 }) }, e.prototype.getLineJoint = function () { return new THREE.LineBasicMaterial({ color: this.LINE_JOINT, side: THREE.DoubleSide, transparent: !0 }) }, e.prototype.getLineQuadTree = function () { return new THREE.LineBasicMaterial({ color: this.QUADTREE, side: THREE.DoubleSide, opacity: this.QUADTREE_A, transparent: !0 }) }, e }(); e.Color = t }(box2dp || (box2dp = {})); var box2dp; !function (e) { var t = function () { function e(e, t, i) { this.type = e, t && (this.target = t), i && (this.values = i) } return e.prototype.toString = function () { return "[event] type: " + this.type + " target: " + this.target + " values: " + this.values }, e.ITEM_CREATED = "item_created", e.BEFORE_STEP = "before_step", e.AFTER_STEP = "after_step", e.BEFORE_RENDER = "before_render", e.AFTER_RENDER = "after_render", e.BEGIN_CONTACT = "begin_contact", e.END_CONTACT = "end_contact", e.PRESOLVE = "presolve", e.POSTSOLVE = "postsolve", e.PARTICLE_REMOVED = "particleRemoved", e.PARTICLE_CREATED = "particleCreated", e.PARTICLE_FIXTURE_CONTACT = "pfContact", e.PARTICLE_PARTICLE_CONTACT = "ppContact", e }(); e.Event = t; var i = function () { function e() { this.callBacks = [] } return e.prototype.addEvent = function (e, t, i) { null == this.callBacks[e] && (this.callBacks[e] = []), this.callBacks[e].push({ func: t, caller: i }) }, e.prototype.removeEvent = function (e, t) { if (null != this.callBacks[e]) for (var i = this.callBacks[e].length, o = 0; i > o; o++) if (this.callBacks[e][o].func === t) { this.callBacks[e].splice(o, 1); break } }, e.prototype.fireEvent = function (e) { if (null != this.callBacks[e.type]) for (var t = this.callBacks[e.type].length, i = 0; t > i; i++) this.callBacks[e.type][i].func(e, this.callBacks[e.type][i].caller) }, e }(); e.EventDispatcher = i }(box2dp || (box2dp = {})); var __extends = this && this.__extends || function (e, t) { function i() { this.constructor = e } for (var o in t) t.hasOwnProperty(o) && (e[o] = t[o]); e.prototype = null === t ? Object.create(t) : (i.prototype = t.prototype, new i) }, box2dp; !function (e) { var t = function (t) { function o(r, n, s) { void 0 === n && (n = .1), void 0 === s && (s = o.UPDATE_FIXED), t.call(this), this.particleSystemUniqueCount = 0, this.world = new box2d.b2World(new box2d.b2Vec2(r.x, r.y)), this.maker = new e.BoxMaker(this.world, this), this.physicFixStepTime = n, this.renderers = [], this.items = [], this.particleSystems = [], this.particles = {}, this.particleGroups = [], this.updateMode = s, this.groundBody = this.world.CreateBody(new box2d.b2BodyDef), this.contactManager = new i(this), this.world.SetContactListener(this.contactManager), this.destructionListener = new DestructionListener(this), this.world.SetDestructionListener(this.destructionListener) } return __extends(o, t), o.addCounter = function (e) { return null == o.uniqueNameCounters[e] && (o.uniqueNameCounters[e] = 0), o.uniqueNameCounters[e]++, o.uniqueNameCounters[e].toString(36) }, o.prototype.setDebugDrawElements = function (e, t, i) { this.debugDrawCanvas = document.getElementById(e), this.debugDrawCtx = this.debugDrawCanvas.getContext("2d"), this.debugDraw = new box2d.DebugDraw(this.debugDrawCanvas), this.debugDraw.SetFlags(box2d.b2DrawFlags.e_shapeBit | box2d.b2DrawFlags.e_particleBit | box2d.b2DrawFlags.e_jointBit), this.world.SetDebugDraw(this.debugDraw), this.debugDrawCanvas.width = t, this.debugDrawCanvas.height = i }, o.prototype.addRenderer = function (e) { this.renderers.push(e), e.domain = this, this.rlen = this.renderers.length }, o.prototype.eachRenderer = function (e) { for (var t = this.renderers.length, i = t - 1; i > -1; i--) e && e(this.renderers[i], i) }, o.prototype.getUniqueName = function (e) { for (var t = !1, i = 0; i < this.items.length; i++) if (this.items[i].name == e) { t = !0; break } if (t) { for (var o = "", r = 1, n = !1, s = 0; !n;) { o = e + "-" + r; for (var a = !1, i = 0; i < this.items.length; i++) if (this.items[i].name == o) { r += 1, a = !0; break } if (s++, s > 100) break; 0 == a && (n = !0) } return o } return e }, o.prototype.create = function (t) { var i = t.name; i = null == t.name ? "ItemEntity-" + o.addCounter("ItemEntity") : this.getUniqueName(i); var r = new e.ItemEntity(this.maker.create(t), t.itemType, i); t.isSensor && (r.isSensor = !0), this.items.push(r); for (var n = 0; n < this.rlen; n++) this.renderers[n].onItemCreate(r); return this.fireEvent(new e.Event(e.Event.ITEM_CREATED, this, r)), r }, o.prototype.createChain = function (e) { var t = e.name; return t = null == e.name ? "ItemEntity-" + o.addCounter("ItemEntity") : this.getUniqueName(t), this.maker.createChain(t, e) }, o.prototype.createParticleSystem = function (e, t, i, o) { var r = this.world.CreateParticleSystem(e), n = "ps." + this.particleSystemUniqueCount; this.particles[n] = [], this.particleSystems.push(r), r.name = n; for (var s = 0; s < this.rlen; s++) this.renderers[s].onParticleSystemCreate(r, t, i, o); return this.particleSystemUniqueCount++, r }, o.prototype.createParticle = function (e, t, i) { return this.maker.createParticle(e, t, i) }, o.prototype.destroyParticle = function (e, t) { e.DestroyParticle(t, null) }, o.prototype.createParticleGroup = function (e, t, i) { return this.maker.createParticleGroup(e, t, i) }, o.prototype.destroyParticleGroup = function (e, t) { e.DestroyParticleGroup(t) }, o.prototype.fillParticles = function (e, t, i, o) { return this.maker.fillParticles(e, t, i, o) }, o.prototype.createJoint = function (e) { return this.world.CreateJoint(e) }, o.prototype.step = function () { var t = this.items.length; if (this.quadTree) { this.quadTree.clear(); for (var i = 0; t > i; i++) { var r = this.quadTree.getItemSelector(this.items[i]); r && (this.quadTree.insert(r), this.items[i].selector = r) } } for (var i = 0; t > i; i++) this.items[i].integratePos(1), this.items[i].setOldPos(); for (var n = 0; n < this.particleSystems.length; n++) for (var s = this.particleSystems[n], a = s.GetPositionBuffer(), h = s.GetUserDataBuffer(), d = this.particles[s.name], c = 0; c < d.length; c++) h[c].integratePos(1), h[c].currentIndex = c, h[c].setOldPos(a[c].x, a[c].y); this.fireEvent(new e.Event(e.Event.BEFORE_STEP, this)), this.updateMode == o.UPDATE_FIXED && this.world.Step(this.physicFixStepTime, 8, 3, 3), this.debugDrawCtx && (this.debugDrawCtx.clearRect(0, 0, this.debugDrawCanvas.width, this.debugDrawCanvas.height), this.world.DrawDebugData()); for (var i = 0; t > i; i++) this.items[i].setCurrentPos(), this.items[i].updateBoundary(); for (var n = 0; n < this.particleSystems.length; n++) for (var s = this.particleSystems[n], a = s.GetPositionBuffer(), h = s.GetUserDataBuffer(), d = this.particles[s.name], c = 0; c < d.length; c++) h[c] && h[c].setCurrentPos(a[c].x, a[c].y); this.fireEvent(new e.Event(e.Event.AFTER_STEP, this)), this.lastStepTime = (new Date).getTime() }, o.prototype.render = function () { var t, i = (new Date).getTime() - this.lastStepTime; if (isNaN(i) ? t = 1 : (t = i / this.stepTime, t > 1 && (t = 1)), 0 != t && 1 != t) { for (var o = this.items.length, r = 0; o > r; r++) this.items[r].integratePos(t); for (var n = 0; n < this.particleSystems.length; n++) for (var s = this.particles[this.particleSystems[n].name], a = 0; a < s.length; a++) s[a].integratePos(t) } this.fireEvent(new e.Event(e.Event.BEFORE_RENDER, this, i)); for (var h = 0; h < this.rlen; h++) this.renderers[h].render(); this.fireEvent(new e.Event(e.Event.AFTER_RENDER, this, i)) }, o.prototype.run = function (e, t) { var i = this; this.stepTime = e, this.renderTime = t, this.stepInterval = setInterval(function () { i.step() }, this.stepTime), this.renderInterval = setInterval(function () { i.render() }, this.renderTime) }, o.prototype.runAStep = function (e, t) { this.stepTime = e, this.renderTime = t, this.step(), this.render() }, o.prototype.stop = function () { clearInterval(this.stepInterval), clearInterval(this.renderInterval) }, o.prototype.updateInterval = function (e, t) { var i = this; this.stop(), this.stepTime = e, this.renderTime = t, this.stepInterval = setInterval(function () { i.step() }, this.stepTime), this.renderInterval = setInterval(function () { i.render() }, this.renderTime) }, o.prototype.setUpdateMode = function (e) { this.updateMode = e }, o.prototype.itemUnderPoint = function (e, t) { var i = new QueryCallBack, o = new box2d.b2AABB; return o.lowerBound.Set(e, t), o.upperBound.Set(e + .001, t + .001), this.world.QueryAABB(i, o), i.itemList }, o.prototype.eachItem = function (e) { for (var t = this.items.concat(), i = t.length, o = i - 1; o > -1; o--) e && e(t[o], o) }, o.prototype.removeItem = function (e) { for (var t = 0; t < this.rlen; t++) this.renderers[t].onItemRemove(e); for (var i = this.items.length, o = i - 1; o > -1; o--) if (this.items[o] === e) { this.items.splice(o, 1); break } e.removeJoints(), e.removePhysic(), e = null }, o.UPDATE_FIXED = 1, o.UPDATE_TIME_BASED = 2, o.uniqueNameCounters = {}, o }(e.EventDispatcher); e.Domain = t; var i = function () { function t(e) { this.domain = e, box2d.b2ContactListener.call(this) } return t.prototype.PreSolve = function (t, i) { var o = t.GetFixtureA().GetBody().item, r = t.GetFixtureB().GetBody().item; o && r && (o.enableSolveEvent && o.fireEvent(new e.Event(e.Event.PRESOLVE, o, { otherItem: r, contact: t, oldManifold: i })), r.enableSolveEvent && r.fireEvent(new e.Event(e.Event.PRESOLVE, r, { otherItem: o, contact: t, oldManifold: i }))) }, t.prototype.PostSolve = function (t, i) { var o = t.GetFixtureA().GetBody().item, r = t.GetFixtureB().GetBody().item; o && r && (o.enableSolveEvent && o.fireEvent(new e.Event(e.Event.POSTSOLVE, o, { otherItem: r, contact: t, impulse: i })), r.enableSolveEvent && r.fireEvent(new e.Event(e.Event.POSTSOLVE, r, { otherItem: o, contact: t, impulse: i }))) }, t.prototype.BeginContact = function (t) { var i = t.GetFixtureA().GetBody().item, o = t.GetFixtureB().GetBody().item; i && o && (i.enableContactEvent && i.fireEvent(new e.Event(e.Event.BEGIN_CONTACT, i, { contact: t, otherItem: o })), o.enableContactEvent && o.fireEvent(new e.Event(e.Event.BEGIN_CONTACT, o, { contact: t, otherItem: i }))) }, t.prototype.EndContact = function (t) { var i = t.GetFixtureA().GetBody().item, o = t.GetFixtureB().GetBody().item; i && o && (i.enableContactEvent && i.fireEvent(new e.Event(e.Event.END_CONTACT, i, { contact: t, otherItem: o })), o.enableContactEvent && o.fireEvent(new e.Event(e.Event.END_CONTACT, o, { contact: t, otherItem: i }))) }, t.prototype.BeginContactFixtureParticle = function (t, i) { this.domain.fireEvent(new e.Event(e.Event.PARTICLE_FIXTURE_CONTACT, this.domain, { system: t, contact: i })) }, t.prototype.BeginContactParticleParticle = function (t, i) { this.domain.fireEvent(new e.Event(e.Event.PARTICLE_PARTICLE_CONTACT, this.domain, { system: t, contact: i })) }, t }() }(box2dp || (box2dp = {})); var DestructionListener = function (e) { this.domain = e, this.itemList = [], this.particleData = [] }; window.goog.inherits(DestructionListener, box2d.b2DestructionListener), DestructionListener.prototype.SayGoodbyeJoint = function (e) { }, DestructionListener.prototype.SayGoodbyeFixture = function (e) { }, DestructionListener.prototype.SayGoodbyeParticleGroup = function (e) { for (var t = e.m_system, i = 0; i < this.domain.particleGroups.length; i++) if (this.domain.particleGroups[i] === e) { this.domain.particleGroups.splice(i, 1); break } var o = e.GetBufferIndex(), r = o + e.GetParticleCount(); for (t.GetUserDataBuffer() ; r > o; o++) t.DestroyParticle(o) }, DestructionListener.prototype.SayGoodbyeJoint = function (e) { }, DestructionListener.prototype.SayGoodbyeParticle = function (e, t) { for (var i = (e.GetPositionBuffer(), e.GetUserDataBuffer()), o = i[t], r = this.domain.particles[e.name], n = r.length, s = 0; n > s; s++) if (r[s] === o) { r.splice(s, 1); break } o && (this.domain.eachRenderer(function (e, t) { o && o.display && e.onParticleDestroy(o) }), this.domain.fireEvent(new box2dp.Event(box2dp.Event.PARTICLE_REMOVED, this.domain, { itemParticle: o })), i[t] = null, o.display = null, o = null) }; var QueryCallBack = function () { this.itemList = [], this.particleData = [] }; window.goog.inherits(QueryCallBack, box2d.b2QueryCallback), QueryCallBack.prototype.ReportFixture = function (e) { return this.itemList.push(e), !0 }, QueryCallBack.prototype.ReportParticle = function (e, t) { return this.particleData.push({ index: t, system: e }), !0 }; var RayCastCallback = function () { box2d.b2RayCastCallback.call(this), this.itemList = [] }; window.goog.inherits(RayCastCallback, box2d.b2RayCastCallback), RayCastCallback.prototype.ReportFixture = function (e, t, i, o) { this.itemList.push({ fixture: e, point: t.Clone(), normal: i.Clone(), fraction: o }) }; var box2dp; !function (e) { var t = function (e) { function t(t) { e.call(this), this.name = t } return __extends(t, e), t.prototype.remove = function () { }, t.SHAPE = 1, t.UNIT = 3, t.PATH = 4, t }(e.EventDispatcher); e.ItemBase = t }(box2dp || (box2dp = {})); var box2dp; !function (e) { var t = function (t) { function i(e, i, o) { t.call(this, o), this.enableContactEvent = !1, this.enableSolveEvent = !1, this.type = i, this.b2body = e, this.b2body.item = this, this.dynamic = this.b2body.GetType() === box2d.b2BodyType.b2_dynamicBody, this.setOldPos(), this.setCurrentPos(), this.updateBoundary(), this.display = {} } return __extends(i, t), i.prototype.setOldPos = function () { this.oldx = e.MakeInfo.mult30(this.b2body.GetPosition().x), this.oldy = e.MakeInfo.mult30(this.b2body.GetPosition().y), this.oldr = this.b2body.GetAngle() }, i.prototype.setCurrentPos = function () { this.cx = e.MakeInfo.mult30(this.b2body.GetPosition().x), this.cy = e.MakeInfo.mult30(this.b2body.GetPosition().y), this.cr = this.b2body.GetAngle() }, i.prototype.integratePos = function (e) { this.ix = Math.round(this.oldx + (this.cx - this.oldx) * e), this.iy = Math.round(this.oldy + (this.cy - this.oldy) * e), this.ir = this.oldr + (this.cr - this.oldr) * e }, i.prototype.getb2X = function () { return this.b2body.GetPosition().x }, i.prototype.getb2Y = function () { return this.b2body.GetPosition().y }, i.prototype.getPixelX = function () { return Math.round(30 * this.b2body.GetPosition().x) }, i.prototype.getPixelY = function () { return Math.round(30 * this.b2body.GetPosition().y) }, i.prototype.updateBoundary = function () { var t = new box2d.b2AABB; t.lowerBound = new box2d.b2Vec2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY), t.upperBound = new box2d.b2Vec2(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY); for (var i = this.b2body.GetFixtureList() ; i; i = i.GetNext()) for (var o = i.GetShape(), r = 0; r < o.GetChildCount() ; r++) t.Combine1(i.GetAABB(r)); var n = t.lowerBound.x, s = t.lowerBound.y, a = t.upperBound.x - t.lowerBound.x, h = t.upperBound.y - t.lowerBound.y; this.boundary = { x: n, y: s, w: a, h: h }, this.boundaryMult = { x: e.MakeInfo.mult30(n), y: e.MakeInfo.mult30(s), w: e.MakeInfo.mult30(a), h: e.MakeInfo.mult30(h) } }, i.prototype.getBoundary = function (t, i) { var o = this.boundary; t && (o = this.boundaryMult); var r = { x: o.x, y: o.y, w: o.w, h: o.h }; return i && (t ? (r.x -= e.MakeInfo.mult30(this.b2body.GetPosition().x), r.y -= e.MakeInfo.mult30(this.b2body.GetPosition().y)) : (r.x -= this.b2body.GetPosition().x, r.y -= this.b2body.GetPosition().y)), r }, i.prototype.setb2Position = function (e, t) { this.b2body.SetPosition(new box2d.b2Vec2(e, t)) }, i.prototype.setPixelPosition = function (e, t) { this.b2body.SetPosition(new box2d.b2Vec2(e / 30, t / 30)) }, i.prototype.setDynamic = function (e) { this.b2body && (this.b2body.GetType() === box2d.b2BodyType.b2_dynamicBody ? this.b2body.SetType(box2d.b2BodyType.b2_staticBody) : this.b2body.GetType() === box2d.b2BodyType.b2_staticBody && this.b2body.SetType(box2d.b2BodyType.b2_dynamicBody), this.dynamic = e) }, i.prototype.setCollisionMask = function (e) { for (var t = this.b2body.GetFixtureList() ; null != t;) { var i = t.GetFilterData(); i.maskBits = e, t.SetFilterData(i), t = t.GetNext() } }, i.prototype.removePhysic = function () { this.b2body.SetUserData(void 0), this.b2body.GetWorld().DestroyBody(this.b2body), this.b2body.item = void 0, this.b2body = void 0, this.display = void 0 }, i.prototype.removeJoints = function () { var e = this.b2body.GetJointList(); if (null != e) { for (var t = [], i = e.joint; i; i = i.GetNext()) t.push(i); for (var o = 0; o < t.length; o++) this.b2body.GetWorld().DestroyJoint(t[o]) } }, i }(e.ItemBase); e.ItemEntity = t }(box2dp || (box2dp = {})); var box2dp; !function (e) { var t = function () { function t() { this.name = "p." + t.UNIQUE_COUNT, this.uniqueAlpha = this.uniqueColor = null, t.UNIQUE_COUNT++ } return t.prototype.init = function (e, t, i) { this.system = e, this.group = t; var o = this.system.GetPositionBuffer()[i]; this.setOldPos(o.x, o.y), this.setCurrentPos(o.x, o.y), this.display = {} }, t.prototype.setOldPos = function (t, i) { this.oldx = e.MakeInfo.mult30(t), this.oldy = e.MakeInfo.mult30(i) }, t.prototype.setCurrentPos = function (t, i) { this.cx = e.MakeInfo.mult30(t), this.cy = e.MakeInfo.mult30(i) }, t.prototype.integratePos = function (e) { this.ix = Math.round(this.oldx + (this.cx - this.oldx) * e), this.iy = Math.round(this.oldy + (this.cy - this.oldy) * e) }, t.UNIQUE_COUNT = 0, t }(); e.ItemParticle = t }(box2dp || (box2dp = {})); var box2dp; !function (e) { var t = function () { function e(e, t, i, o, r, n, s) { void 0 === n && (n = 3), void 0 === s && (s = 4), this.items = [], this.nodes = [], this.x = e, this.y = t, this.width = i, this.height = o, this.depth = r, this.maxChildren = n, this.maxDepth = s } return e.prototype.retrieve = function (e, t, i) { for (var o = this, r = this.items.length, n = 0; r > n; ++n) i ? t.call(i, this.items[n]) : t(this.items[n]); this.nodes.length && this.findOverlappingNodes(e, function (r) { o.nodes[r].retrieve(e, t, i) }) }, e.prototype.findOverlappingNodes = function (t, i) { t.x < this.x + this.width / 2 && (t.y < this.y + this.height / 2 && i(e.TOP_LEFT), t.y + t.height >= this.y + this.height / 2 && i(e.BOTTOM_LEFT)), t.x + t.width >= this.x + this.width / 2 && (t.y < this.y + this.height / 2 && i(e.TOP_RIGHT), t.y + t.height >= this.y + this.height / 2 && i(e.BOTTOM_RIGHT)) }, e.prototype.findInsertNode = function (t) { return t.x + t.width < this.x + this.width / 2 ? t.y + t.height < this.y + this.height / 2 ? e.TOP_LEFT : t.y >= this.y + this.height / 2 ? e.BOTTOM_LEFT : e.PARENT : t.x >= this.x + this.width / 2 ? t.y + t.height < this.y + this.height / 2 ? e.TOP_RIGHT : t.y >= this.y + this.height / 2 ? e.BOTTOM_RIGHT : e.PARENT : e.PARENT }, e.prototype.insert = function (t) { var i; this.nodes.length > 0 ? (i = this.findInsertNode(t), i === e.PARENT ? (this.items.push(t), t.parent = this) : (this.nodes[i].insert(t), t.parent = this.nodes[i])) : (this.items.push(t), t.parent = this, this.items.length > this.maxChildren && this.depth < this.maxDepth && this.divide()) }, e.prototype.divide = function () { var t, i, o, r, n = this.depth + 1; for (t = this.width / 2, i = this.height / 2, this.nodes.push(new e(this.x, this.y, t, i, n, this.maxChildren, this.maxDepth)), this.nodes.push(new e(this.x + t, this.y, t, i, n, this.maxChildren, this.maxDepth)), this.nodes.push(new e(this.x, this.y + i, t, i, n, this.maxChildren, this.maxDepth)), this.nodes.push(new e(this.x + t, this.y + i, t, i, n, this.maxChildren, this.maxDepth)), r = this.items, this.items = [], o = 0; o < r.length; o++) this.insert(r[o]) }, e.prototype.clear = function () { for (var e = this.nodes.length; e--;) this.nodes[e].clear(); this.items = [], this.nodes = [] }, e.TOP_LEFT = 0, e.TOP_RIGHT = 1, e.BOTTOM_LEFT = 2, e.BOTTOM_RIGHT = 3, e.PARENT = 4, e }(); e.QuadNode = t; var i = function () { function e(e, t, i, o, r) { this.x = e, this.y = t, this.width = i, this.height = o, this.data = r } return e.prototype.toString = function () { return "x:" + this.x + " y:" + this.y + " w: " + this.width + " h: " + this.height }, e }(); e.QuadSelector = i; var o = function () { function e(e, i, o, r, n, s) { void 0 === n && (n = 3), void 0 === s && (s = 4), this.rootNode = new t(e, i, o, r, 0, n, s) } return e.prototype.insert = function (e) { this.rootNode.insert(e) }, e.prototype.retrieve = function (e, t, i) { return this.rootNode.retrieve(e, t, i) }, e.prototype.clear = function () { this.rootNode.clear() }, e.prototype.getItemSelector = function (e) { var t; if (null != e.b2body) { var o = e, r = o.getBoundary(!1, !1); t = new i(r.x, r.y, r.w, r.h, e) } return t }, e.prototype.quadTreeSelect = function (e) { var t = [], i = e.selector; return this.retrieve(i, function (i) { i.data != e && t.push(i) }), t.length > 0 ? t : null }, e }(); e.QuadTree = o }(box2dp || (box2dp = {})); var box2dp; !function (e) { var t = function () { function t(t) { var i = this; this.dragging = !1, this.domain = t.domain, this.world = this.domain.world, this.renderer = t, this.domain.addEvent(e.Event.BEFORE_STEP, this.beforeStep = function (e) { i.beforeStepUpdate() }) } return t.prototype.createDragDrop = function () { this.renderer.constructor === e.PixiRenderer && this.createPixiDragDrop(), this.renderer.constructor === e.ThreeRenderer && this.createThreeDragDrop() }, t.prototype.removeDragDrop = function () { this.renderer.useElement.removeEventListener("mousedown", this.mousedownObj), document.removeEventListener("mousemove", this.mouseMoveObj), document.removeEventListener("mouseup", this.mouseUpObj) }, t.prototype.createPixiDragDrop = function () { var e = this; this.renderer.useElement.addEventListener("mousedown", this.mousedownObj = function (t) { e.ddPress(t) }) }, t.prototype.ddPress = function (t) { var i = this, o = e.MakeInfo.round((t.pageX - this.renderer.useElement.offsetLeft) / 30), r = e.MakeInfo.round((t.pageY - this.renderer.useElement.offsetTop) / 30); this.mousePt = new box2d.b2Vec2(o, r), this.tweenPt = new box2d.b2Vec2(o, r), this.dragging = !0; var n = this.domain.itemUnderPoint(o, r); if (n.length > 0) { var s = n[0].GetBody(), a = new box2d.b2MouseJointDef; a.bodyA = this.domain.groundBody, a.bodyB = s, a.target.Copy(new box2d.b2Vec2(o, r)), a.maxForce = 1e3 * s.GetMass(), this.mouseJoint = this.domain.world.CreateJoint(a), s.SetAwake(!0) } document.addEventListener("mousemove", this.mouseMoveObj = function (e) { i.ddMove(e) }), document.addEventListener("mouseup", this.mouseUpObj = function (e) { i.ddUp(e) }) }, t.prototype.ddMove = function (t) { var i = e.MakeInfo.round((t.pageX - this.renderer.useElement.offsetLeft) / 30), o = e.MakeInfo.round((t.pageY - this.renderer.useElement.offsetTop) / 30); this.mouseJoint && this.mouseJoint.SetTarget(new box2d.b2Vec2(i, o)), this.mousePt = new box2d.b2Vec2(i, o) }, t.prototype.ddUp = function (e) { this.mouseJoint && (this.domain.world.DestroyJoint(this.mouseJoint), this.mouseJoint = null), this.dragging = !1, document.removeEventListener("mousemove", this.mouseMoveObj), document.removeEventListener("mouseup", this.mouseUpObj) }, t.prototype.tjPress = function (t) { var i = this, o = t.pageX - this.renderer.useElement.offsetLeft, r = t.pageY - this.renderer.useElement.offsetTop, n = this.renderer.getXYFromCamera(o, r), s = e.MakeInfo.round(n.x / 30), a = e.MakeInfo.round(n.y / 30); this.mousePt = new box2d.b2Vec2(s, a), this.tweenPt = new box2d.b2Vec2(s, a), this.dragging = !0; var h = this.domain.itemUnderPoint(s, a); if (h.length > 0) { var d = h[0].GetBody(), c = new box2d.b2MouseJointDef; c.bodyA = this.domain.groundBody, c.bodyB = d, c.target.Copy(new box2d.b2Vec2(s, a)), c.maxForce = 1e3 * d.GetMass(), this.mouseJoint = this.domain.world.CreateJoint(c), d.SetAwake(!0) } document.addEventListener("mousemove", this.mouseMoveObj = function (e) { i.tjMove(e) }), document.addEventListener("mouseup", this.mouseUpObj = function (e) { i.tjUp(e) }) }, t.prototype.createThreeDragDrop = function () { var e = this; this.renderer.useElement.addEventListener("mousedown", this.mousedownObj = function (t) { e.tjPress(t) }) }, t.prototype.tjMove = function (t) { var i = t.pageX - this.renderer.useElement.offsetLeft, o = t.pageY - this.renderer.useElement.offsetTop, r = this.renderer.getXYFromCamera(i, o), n = e.MakeInfo.round(r.x / 30), s = e.MakeInfo.round(r.y / 30); this.mousePt = new box2d.b2Vec2(n, s), this.mouseJoint && this.mouseJoint.SetTarget(new box2d.b2Vec2(n, s)) }, t.prototype.tjUp = function (e) { this.mouseJoint && (this.domain.world.DestroyJoint(this.mouseJoint), this.mouseJoint = null), document.removeEventListener("mousemove", this.mouseMoveObj), document.removeEventListener("mouseup", this.mouseUpObj), this.dragging = !1 }, t.prototype.trackCtrlUpdate = function (e, t) { t.trackCtrl.update(50 * e.values) }, t.prototype.createTrackBallCtrl = function () { var t = this.renderer; t.camera.position.x = 0, t.camera.position.y = 0, this.trackCtrl = new THREE.TrackballControls(t.camera, t.useElement), this.trackCtrl.rotateSpeed = 2, this.trackCtrl.zoomSpeed = 2, this.trackCtrl.panSpeed = 2, this.trackCtrl.dynamicDampingFactor = .3, this.trackCtrl.staticMoving = !0; var i = new THREE.Vector3(.5 * t.options.width, .5 * -t.options.height, 0); this.trackCtrl.object.position.add(i), this.trackCtrl.target.add(i), this.domain.addEvent(e.Event.AFTER_RENDER, this.trackCtrlUpdate, this) }, t.prototype.removeTrackBallCtrl = function () { this.domain.removeEvent(e.Event.AFTER_RENDER, this.trackCtrlUpdate), this.trackCtrl && (this.trackCtrl.enabled = !1, this.trackCtrl = void 0) }, t.prototype.orbitCtrlUpdate = function (e, t) { t.orbCtrl.update() }, t.prototype.createOrbitCtrl = function () { var t = this.renderer; this.orbCtrl = new THREE.OrbitControls(t.camera, t.useElement), this.orbCtrl.enableDamping = !0, this.orbCtrl.dampingFactor = .2; var i = new THREE.Vector3(.5 * t.options.width, .5 * -t.options.height, 0); this.orbCtrl.target = i, this.domain.addEvent(e.Event.AFTER_RENDER, this.orbitCtrlUpdate, this) }, t.prototype.removeOrbitCtrl = function () { this.domain.removeEvent(e.Event.AFTER_RENDER, this.orbitCtrlUpdate), this.orbCtrl && (this.orbCtrl.enabled = !1, this.orbCtrl = void 0) }, t.prototype.beforeStepUpdate = function () { if (this.renderer.domain.particleSystems.length > 0 && this.dragging) { var e = .5 * (this.mousePt.x - this.tweenPt.x), t = .5 * (this.mousePt.y - this.tweenPt.y); this.tweenPt.x += e, this.tweenPt.y += t; var i = new box2d.b2Vec2(e, t); i.SelfMul(50); var o = new QueryCallBack, r = new box2d.b2AABB; r.lowerBound.Set(this.tweenPt.x - 1, this.tweenPt.y - 1), r.upperBound.Set(this.tweenPt.x + 1, this.tweenPt.y + 1), this.domain.world.QueryAABB(o, r); var n = o.particleData.length; if (n > 0) for (var s = 0; n > s; s++) { var a = o.particleData[s].index, h = o.particleData[s].system, d = (h.GetPositionBuffer()[a], h.GetVelocityBuffer()[a]); d.Copy(i) } } }, t }(); e.DragControl = t }(box2dp || (box2dp = {})); var box2dp; !function (e) {
    var t = function () {
        function t(e, t) { this.world = e, this.domain = t } return t.prototype.create = function (t) { if (null == t.createType) return void console.error("createType not defined"); var i = t.clone(), o = this.createbody(t); switch (t.createType) { case e.MakeInfo.MAKE_BOX_TOP_LEFT: case e.MakeInfo.MAKE_BOX_CENTER: this.createBoxDef(o, i); break; case e.MakeInfo.MAKE_CIRCLE: this.createCircleDef(o, i); break; case e.MakeInfo.MAKE_POLYGON: this.createPolygonDef(o, i); break; case e.MakeInfo.MAKE_EDGE: this.createEdge(o, i); break; case e.MakeInfo.MAKE_COMPOUND: for (var r = 0; r < i.makeInfos.length; r++) switch (i.makeInfos[r].createType) { case e.MakeInfo.MAKE_BOX_TOP_LEFT: case e.MakeInfo.MAKE_BOX_CENTER: var n = i.makeInfos[r].clone(), s = this.createBoxDef(o, n, n.x, n.y); n.fixtureData && (s.fixtureData = n.fixtureData); break; case e.MakeInfo.MAKE_CIRCLE: var n = i.makeInfos[r].clone(), s = this.createCircleDef(o, n, n.x, n.y); n.fixtureData && (s.fixtureData = n.fixtureData); break; case e.MakeInfo.MAKE_POLYGON: var n = i.makeInfos[r].clone(!0), s = this.createPolygonDef(o, n); n.fixtureData && (s.fixtureData = n.fixtureData); break; case e.MakeInfo.MAKE_EDGE: var n = i.makeInfos[r].clone(!0), a = this.createEdge(o, n); if (n.fixtureData) for (var h = 0; h < a.length; h++) a[h].fixtureData = n.fixtureData } } return i.userData && o.SetUserData(i.userData), o.SetPositionXY(i.x, i.y), o }, t.prototype.createEdge = function (e, t) { var i = this.createFixtureDef(t), o = new box2d.b2EdgeShape, r = []; if (2 == t.b2Vertices.length) o.SetAsEdge(t.b2Vertices[0], t.b2Vertices[1]), i.shape = o, r.push(e.CreateFixture(i)); else if (t.loopEdge) { o.SetAsEdge(t.b2Vertices[0], t.b2Vertices[1]), o.m_hasVertex0 = !0, o.m_vertex3.Copy(t.b2Vertices[t.b2Vertices.length - 1]), o.m_hasVertex3 = !0, o.m_vertex3.Copy(t.b2Vertices[2]), i.shape = o, r.push(e.CreateFixture(i)); for (var n = 1; n < t.b2Vertices.length; n++) { var s = t.b2Vertices[n], a = t.b2Vertices[n + 1]; null == a && (a = t.b2Vertices[0]), o.SetAsEdge(s, a), t.b2Vertices[n - 1] && (o.m_hasVertex0 = !0, o.m_vertex0.Copy(t.b2Vertices[n - 1])); var h = t.b2Vertices[n + 2]; null == h && (h = t.b2Vertices[(n + 2) % t.b2Vertices.length]), o.m_hasVertex3 = !0, o.m_vertex3.Copy(h), i.shape = o, r.push(e.CreateFixture(i)) } } else { o.SetAsEdge(t.b2Vertices[0], t.b2Vertices[1]), o.m_hasVertex3 = !0, o.m_vertex3.Copy(t.b2Vertices[2]), i.shape = o, r.push(e.CreateFixture(i)); for (var n = 1; n < t.b2Vertices.length - 1; n++) { var s = t.b2Vertices[n], a = t.b2Vertices[n + 1]; o.SetAsEdge(s, a), t.b2Vertices[n - 1] && (o.m_hasVertex0 = !0, o.m_vertex0.Copy(t.b2Vertices[n - 1])), t.b2Vertices[n + 2] && (o.m_hasVertex3 = !0, o.m_vertex3.Copy(t.b2Vertices[n + 2])), i.shape = o, r.push(e.CreateFixture(i)) } } return r }, t.prototype.createBoxDef = function (t, i, o, r) { void 0 === o && (o = 0), void 0 === r && (r = 0); var n = this.createFixtureDef(i), s = new box2d.b2PolygonShape, a = new box2d.b2Vec2(o, r); return i.createType == e.MakeInfo.MAKE_BOX_TOP_LEFT && (a.x += .5 * i.w, a.y += .5 * i.h), s.SetAsBox(.5 * i.w, .5 * i.h, a), n.shape = s, t.CreateFixture(n) }, t.prototype.createCircleDef = function (e, t, i, o) { void 0 === i && (i = 0), void 0 === o && (o = 0); var r = this.createFixtureDef(t), n = new box2d.b2CircleShape; return n.m_radius = t.radius, n.m_p.Set(i, o), r.shape = n, e.CreateFixture(r) }, t.prototype.createPolygonDef = function (e, t) { var i = this.createFixtureDef(t), o = new box2d.b2PolygonShape; return o.Set(t.b2Vertices), i.shape = o, e.CreateFixture(i) }, t.prototype.createFixtureDef = function (e) { var t = new box2d.b2FixtureDef; return t.density = e.density, t.friction = e.friction, t.restitution = e.restitution, t.isSensor = e.isSensor, e.maskBits && (t.filter.maskBits = e.maskBits), e.categoryBits && (t.filter.categoryBits = e.categoryBits), t }, t.prototype.createbody = function (e) { var t = new box2d.b2BodyDef; t.type = box2d.b2BodyType.b2_dynamicBody, t.allowSleep = e.allowSleep, t.fixedRotation = e.fixedRotation, e.angle && (t.angle = e.angle), e.isStatic && (t.type = box2d.b2BodyType.b2_staticBody), 1 == e.bullet && (t.bullet = !0); var i = this.world.CreateBody(t); return i }, t.prototype.createItemEntity = function (t, i) { var o = new e.ItemEntity(this.create(t), t.itemType, i); this.domain.items.push(o); for (var r = 0; r < this.domain.rlen; r++) this.domain.renderers[r].onItemCreate(o); return this.domain.fireEvent(new e.Event(e.Event.ITEM_CREATED, this.domain, o)), o }, t.prototype.createChain = function (t, i) {
            i.angle || (i.angle = 0), i.chainOverlap || (i.chainOverlap = 5), null == i.chainPinHead && (i.chainPinHead = !1), null == i.chainPinTail && (i.chainPinTail = !1), null == i.chainCollideConnected && (i.chainCollideConnected = !1); var o = new box2d.b2RevoluteJointDef; o.collideConnected = i.chainCollideConnected; for (var r, n, s, a = new e.MakeInfo({ w: i.h, h: i.w, angle: i.angle, createType: e.MakeInfo.MAKE_BOX_CENTER, density: i.density }), h = { segments: [], pins: [] }, d = 0; d < i.chainAmt; d++) { var c = Math.cos(i.angle) * (i.h - i.chainOverlap), l = Math.sin(i.angle) * (i.h - i.chainOverlap); a.x = i.x + c * d, a.y = i.y + l * d; var u = this.createItemEntity(a, t + ".c." + d); if (h.segments.push(u), 0 == d && (n = u.b2body), d == i.chainAmt - 1 && (s = u.b2body), r) { var p = u.b2body.GetPosition().Clone(); p.x -= Math.cos(i.angle) * i.h / 60, p.y -= Math.sin(i.angle) * i.h / 60, o.Initialize(r, u.b2body, p), this.world.CreateJoint(o) } r = u.b2body } var y = new box2d.b2RopeJointDef; if (y.bodyA = n, y.localAnchorA = new box2d.b2Vec2(0, 0), y.localAnchorB = new box2d.b2Vec2(0, 0), y.maxLength = e.MakeInfo.round((i.h - i.chainOverlap) * i.chainAmt / 30), y.bodyB = s, this.world.CreateJoint(y), i.chainPinHead) {
                var m = new e.MakeInfo({ x: i.x, y: i.y, radius: 4, createType: e.MakeInfo.MAKE_CIRCLE, isStatic: !0 }), f = this.createItemEntity(m, t + ".head"); o.Initialize(f.b2body, n, f.b2body.GetPosition().Clone()), this.world.CreateJoint(o);
            } if (i.chainPinTail) { var E = 30 * s.GetPosition().x, v = 30 * s.GetPosition().y, m = new e.MakeInfo({ x: E, y: v, radius: 4, createType: e.MakeInfo.MAKE_CIRCLE, isStatic: !0 }), b = this.createItemEntity(m, t + ".tail"); o.Initialize(b.b2body, s, b.b2body.GetPosition().Clone()), this.world.CreateJoint(o) } return h
        }, t.prototype.createParticle = function (t, i, o) { var r = new box2d.b2ParticleDef; r.flags = i.flags, r.flags |= box2d.b2ParticleFlag.b2_destructionListenerParticle, r.lifetime = i.lifetime, r.position = i.position.Clone(), r.velocity = i.velocity.Clone(); var n = new e.ItemParticle; r.userData = n, o && (n.uniqueColor = o.color, n.uniqueAlpha = o.alpha); var s = t.CreateParticle(r); n.init(t, null, s), this.domain.particles[t.name].push(n), this.domain.fireEvent(new e.Event(e.Event.PARTICLE_CREATED, this, { itemParticle: n })); for (var a = 0; a < this.domain.rlen; a++) this.domain.renderers[a].onParticleCreate(n); return n }, t.prototype.fillParticles = function (t, i, o, r) { for (var n = [], s = i.position.x, a = i.position.y, h = 2 * t.GetRadius(), d = 0; o > d; d++) for (var c = 0; r > c; c++) { var l = s + h * d, u = a + h * c, p = new box2d.b2ParticleDef; p.flags = i.flags, p.flags |= box2d.b2ParticleFlag.b2_destructionListenerParticle, p.lifetime = i.lifetime, p.position = new box2d.b2Vec2(l, u), p.velocity = i.velocity.Clone(); var y = new e.ItemParticle; p.userData = y; var m = t.CreateParticle(p); y.init(t, null, m), this.domain.particles[t.name].push(y), this.domain.fireEvent(new e.Event(e.Event.PARTICLE_CREATED, this, { itemParticle: y })); for (var f = 0; f < this.domain.rlen; f++) this.domain.renderers[f].onParticleCreate(y); n.push(y) } return n }, t.prototype.createParticleGroup = function (t, i, o) { i.flags |= box2d.b2ParticleFlag.b2_destructionListenerParticle; for (var r = t.CreateParticleGroup(i), n = (t.GetPositionBuffer(), t.GetUserDataBuffer()), s = r.GetBufferIndex(), a = s + r.GetParticleCount() ; a > s; s++) { var h = new e.ItemParticle; o && o(h), n[s] = h, h.init(t, r, s), this.domain.particles[t.name].push(h), this.domain.fireEvent(new e.Event(e.Event.PARTICLE_CREATED, this, { itemParticle: h })); for (var d = 0; d < this.domain.rlen; d++) this.domain.renderers[d].onParticleCreate(h) } return this.domain.particleGroups.push(r), r }, t
    }(); e.BoxMaker = t
}(box2dp || (box2dp = {})); var box2dp; !function (e) { var t = function () { function e(e) { this.x = 0, this.y = 0, this.w = 0, this.h = 0, this.radius = 0, this.allowSleep = !0, this.isStatic = !1, this.density = 1, this.friction = .2, this.restitution = 0, this.fixedRotation = !1, this.loopEdge = !1, this.isSensor = !1; for (var t in e) this[t] = e[t] } return e.round = function (e) { return Math.round(1e3 * e) / 1e3 }, e.random = function (t, i, o) { void 0 === o && (o = !0); var r = Math.random() * (i - t) + t; return o && (r = e.round(r)), r }, e.div30 = function (t) { return e.round(t / 30) }, e.mult30 = function (e) { return Math.round(30 * e) }, e.getb2Vec2 = function (t) { if (this.usePixelScale) { var i = e.round(t.x / 30), o = e.round(t.y / 30); return new box2d.b2Vec2(i, o) } return t }, e.prototype.clone = function (t) { void 0 === t && (t = !1); var i = new e(null); for (var o in this) ("number" == typeof this[o] || "boolean" == typeof this[o] || "string" == typeof this[o]) && (i[o] = this[o]); this.makeInfos && (i.makeInfos = this.makeInfos), this.userData && (i.userData = this.userData), this.fixtureData && (i.fixtureData = this.fixtureData); var r = 0, n = 0; if (t && (r += this.x), t && (n += this.y), this.vertices) { i.vertices = [], i.b2Vertices = []; for (var s = 0; s < this.vertices.length; s++) i.vertices.push({ x: this.vertices[s].x + r, y: this.vertices[s].y + n }), i.b2Vertices.push(new box2d.b2Vec2(this.vertices[s].x + r, this.vertices[s].y + n)) } var a = ["x", "y", "w", "h", "radius"], h = ["vertices", "b2Vertices"]; if (e.usePixelScale) for (var o in i) if (a.indexOf(o) > -1 && (i[o] = e.div30(i[o])), h.indexOf(o) > -1) for (var s = 0; s < i[o].length; s++) i[o][s].x = e.div30(i[o][s].x), i[o][s].y = e.div30(i[o][s].y); return i }, e.ONED = Math.PI / 180, e.usePixelScale = !0, e.MAKE_BOX_TOP_LEFT = 1, e.MAKE_BOX_CENTER = 2, e.MAKE_POLYGON = 3, e.MAKE_CIRCLE = 4, e.MAKE_EDGE = 5, e.MAKE_COMPOUND = 6, e.MAKE_CHAIN = 7, e }(); e.MakeInfo = t }(box2dp || (box2dp = {})); var box2dp; !function (e) { var t = function () { function t(i) { this.drawFlags = t.DRAW_SHAPE, null == i.width && (i.width = 900), null == i.height && (i.height = 600), null == i.antialias && (i.antialias = !0), null == i.invertY && (i.invertY = !0), null == i.elementId || null == document.getElementById(i.elementId) ? this.useElement = document.body : this.useElement = document.getElementById(i.elementId), i.dragFlags && (this.drawFlags = i.dragFlags), null == i.colorClass ? this.colorClass = new e.Color : this.colorClass = i.colorClass, this.options = i } return t.prototype.hasDrawType = function (e) { return (this.drawFlags & e) == e }, t.prototype.simpleJoinDraw = function (e) { for (var t = [box2d.b2RevoluteJoint, box2d.b2WeldJoint, box2d.b2PrismaticJoint, box2d.b2FrictionJoint, box2d.b2AreaJoint, box2d.b2WheelJoint, box2d.b2GearJoint, box2d.b2DistanceJoint, box2d.b2MotorJoint], i = 0; i < t.length; i++) if (e instanceof t[i]) return !0; return !1 }, t.prototype.beforeStep = function () { }, t.prototype.afterStep = function () { }, t.prototype.render = function () { }, t.prototype.onItemCreate = function (e) { }, t.prototype.onItemRemove = function (e) { }, t.prototype.onParticleSystemCreate = function (e, t, i, o) { }, t.prototype.onParticleCreate = function (e) { }, t.prototype.onParticleDestroy = function (e) { }, t.DRAW_SHAPE = 2, t.DRAW_CENTER = 4, t.DRAW_BOUNDARY = 8, t.DRAW_QUAD_TREE = 16, t.DRAW_JOINT = 32, t.DRAW_ALL = t.DRAW_SHAPE | t.DRAW_CENTER | t.DRAW_BOUNDARY | t.DRAW_QUAD_TREE | t.DRAW_JOINT, t }(); e.BaseRenderer = t }(box2dp || (box2dp = {})); var box2dp; !function (e) { var t = function (t) { function i(e) { t.call(this, e); var i = { antialias: !1, transparent: !1 }; e.antialias && (i.antialias = !0), e.transparent && (i.transparent = !0), this.renderer = PIXI.autoDetectRenderer(e.width, e.height, i), !e.transparent && e.backgroundColor && (this.renderer.backgroundColor = e.backgroundColor), this.useElement.appendChild(this.renderer.view), this.scene = new PIXI.Container, this.container = new PIXI.Container, this.scene.addChild(this.container), this.quadGraphic = new PIXI.Graphics, this.scene.addChild(this.quadGraphic), this.overGraphic = new PIXI.Graphics, this.scene.addChild(this.overGraphic), this.jointGraphic = new PIXI.Graphics, this.scene.addChild(this.jointGraphic), this.psGeometries = [] } return __extends(i, t), i.prototype.beforeStep = function () { }, i.prototype.afterStep = function () { }, i.prototype.render = function () { this.jointGraphic.clear(), this.jointGraphic.lineStyle(1, this.colorClass.LINE_JOINT, 1); for (var t = this.domain.items.length, i = 0; t > i; i++) { var o = this.domain.items[i]; o.display.pixi && this.itemDisplayUpdate(o.display.pixi, o) } for (var r = 0; r < this.domain.particleSystems.length; r++) for (var n = this.domain.particleSystems[r], s = this.domain.particles[n.name], a = 0; a < s.length; a++) if (s[a].display.pixi) { var h = s[a].display.pixi; h.x = s[a].ix, h.y = s[a].iy } this.hasDrawType(e.BaseRenderer.DRAW_QUAD_TREE) && null != this.domain.quadTree && (this.quadGraphic.visible = !0, this.quadGraphic.clear(), this.domain.quadTree.rootNode && this.drawTreeNode(this.domain.quadTree.rootNode)), this.hasDrawType(e.BaseRenderer.DRAW_QUAD_TREE) || (this.quadGraphic.clear(), this.quadGraphic.visible = !1), this.renderer.render(this.scene) }, i.prototype.drawTreeNode = function (t) { if (t.nodes.length > 0) for (var i = 0; i < t.nodes.length; i++) this.drawTreeNode(t.nodes[i]); var o = this.quadGraphic; o.lineStyle(2, this.colorClass.QUADTREE, this.colorClass.QUADTREE_A), o.drawRect(e.MakeInfo.mult30(t.x), e.MakeInfo.mult30(t.y), e.MakeInfo.mult30(t.width), e.MakeInfo.mult30(t.height)) }, i.prototype.onItemCreate = function (t) { var i = t, o = new PIXI.Container, r = new PIXI.Graphics; r.name = "shape"; var n = new PIXI.Graphics; n.name = "center"; var s = new PIXI.Graphics; s.name = "boundary", o.addChild(r), r.addChild(n), o.addChild(s), i.display.pixi = o, this.container.addChild(o); var a = i.b2body.GetFixtureList(), h = this.colorClass.ITEM_STATIC, d = this.colorClass.ITEM_ALPHA; for (i.b2body.GetType() == box2d.b2BodyType.b2_dynamicBody && (h = this.colorClass.ITEM_DYNAMIC), t.isSensor && (h = this.colorClass.SENSOR, d = this.colorClass.SENSOR_ALPHA) ; null != a;) { switch (a.GetType()) { case box2d.b2ShapeType.e_circleShape: var c = a.GetShape(), l = e.MakeInfo.mult30(c.m_radius); r.lineWidth = 0, r.beginFill(h, d); var u = e.MakeInfo.mult30(c.m_p.x), p = e.MakeInfo.mult30(c.m_p.y); r.drawCircle(u, p, l), r.endFill(); break; case box2d.b2ShapeType.e_polygonShape: var y = a.GetShape(); r.lineWidth = 0, r.beginFill(h, d); var m = e.MakeInfo.mult30(y.m_vertices[0].x), f = e.MakeInfo.mult30(y.m_vertices[0].y); r.moveTo(m, f); for (var E = 0; E < y.m_count; E++) { var v = e.MakeInfo.mult30(y.m_vertices[E].x), b = e.MakeInfo.mult30(y.m_vertices[E].y); r.lineTo(v, b) } r.lineTo(m, f), r.endFill(); break; case box2d.b2ShapeType.e_edgeShape: var T = a.GetShape(); r.lineStyle(1, h, d), r.lineWidth = 2; var x = e.MakeInfo.mult30(T.m_vertex1.x), C = e.MakeInfo.mult30(T.m_vertex1.y), I = e.MakeInfo.mult30(T.m_vertex2.x), g = e.MakeInfo.mult30(T.m_vertex2.y); r.moveTo(x, C), r.lineTo(I, g) } a = a.GetNext() } var A = e.MakeInfo.mult30(i.b2body.GetLocalCenter().x), _ = e.MakeInfo.mult30(i.b2body.GetLocalCenter().y); n.moveTo(A, _), n.lineStyle(1, 16756121, 1), n.lineTo(A + 8, _), n.moveTo(A, _), n.lineStyle(1, 11403161, 1), n.lineTo(A, _ + 8); var w = t.getBoundary(!0, !0); s.lineStyle(1, 7297135, 1), this.dashLine(s, w.x, w.y, w.x + w.w, w.y), this.dashLine(s, w.x, w.y + w.h, w.x + w.w, w.y + w.h), this.dashLine(s, w.x, w.y, w.x, w.y + w.h), this.dashLine(s, w.x + w.w, w.y, w.x + w.w, w.y + w.h), this.itemDisplayUpdate(o, i) }, i.prototype.onItemRemove = function (e) { e.display && e.display.pixi && (this.container.removeChild(e.display.pixi), e.display.pixi.destroy(!0), delete e.display.pixi) }, i.prototype.onParticleSystemCreate = function (e, t, i, o) { this.psGeometries[e.name] = { shapeType: t, color: i, alpha: o } }, i.prototype.onParticleCreate = function (t) { var i = new PIXI.Graphics, o = this.psGeometries[t.system.name], r = o.color, n = o.alpha; null != t.uniqueColor && (r = t.uniqueColor, n = t.uniqueAlpha); var s = e.MakeInfo.mult30(t.system.GetRadius()); o.shapeType == e.MakeInfo.MAKE_BOX_CENTER ? (i.beginFill(r, n), i.drawRect(-s, -s, 2 * s, 2 * s), i.endFill()) : (i.beginFill(r, n), i.drawCircle(0, 0, s), i.endFill()), i.x = t.cx, i.y = t.cy, this.container.addChild(i), t.display.pixi = i, i.name = t.name }, i.prototype.onParticleDestroy = function (e) { e.display.pixi && (this.container.removeChild(e.display.pixi), e.display.pixi.destroy(!0), delete e.display.pixi) }, i.prototype.itemDisplayUpdate = function (t, i) { t.x = i.ix, t.y = i.iy, t.getChildByName("shape").rotation = i.ir, t.getChildByName("shape").visible = this.hasDrawType(e.BaseRenderer.DRAW_SHAPE), t.getChildByName("shape").getChildByName("center").visible = this.hasDrawType(e.BaseRenderer.DRAW_CENTER), t.getChildByName("boundary").visible = this.hasDrawType(e.BaseRenderer.DRAW_BOUNDARY); var o = t.getChildByName("boundary"); o.clear(); var r = i.getBoundary(!0, !0); if (o.lineStyle(1, 7297135, 1), this.dashLine(o, r.x, r.y, r.x + r.w, r.y), this.dashLine(o, r.x, r.y + r.h, r.x + r.w, r.y + r.h), this.dashLine(o, r.x, r.y, r.x, r.y + r.h), this.dashLine(o, r.x + r.w, r.y, r.x + r.w, r.y + r.h), this.hasDrawType(e.BaseRenderer.DRAW_JOINT)) { var n = i.b2body.GetJointList(); if (null != n) for (var s = n.joint; s; s = s.GetNext()) s.GetBodyA().item && s.GetBodyB().item && (this.simpleJoinDraw(s) ? (this.jointGraphic.moveTo(s.GetBodyA().item.ix, s.GetBodyA().item.iy), this.jointGraphic.lineTo(s.GetBodyB().item.ix, s.GetBodyB().item.iy)) : s instanceof box2d.b2PulleyJoint && (this.jointGraphic.moveTo(s.GetBodyA().item.ix, s.GetBodyA().item.iy), this.jointGraphic.lineTo(e.MakeInfo.mult30(s.m_groundAnchorA.x), e.MakeInfo.mult30(s.m_groundAnchorA.y)), this.jointGraphic.moveTo(s.GetBodyB().item.ix, s.GetBodyB().item.iy), this.jointGraphic.lineTo(e.MakeInfo.mult30(s.m_groundAnchorB.x), e.MakeInfo.mult30(s.m_groundAnchorB.y)), this.jointGraphic.moveTo(e.MakeInfo.mult30(s.m_groundAnchorA.x), e.MakeInfo.mult30(s.m_groundAnchorA.y)), this.jointGraphic.lineTo(e.MakeInfo.mult30(s.m_groundAnchorB.x), e.MakeInfo.mult30(s.m_groundAnchorB.y)))) } }, i.prototype.dashLine = function (e, t, i, o, r, n) { n || (n = [10, 5]); var s = n.length; e.moveTo(t, i); for (var a = o - t, h = r - i, d = a ? h / a : 1e15, c = Math.sqrt(a * a + h * h), l = 0, u = !0; c >= .1;) { var p = n[l++ % s]; p > c && (p = c); var y = Math.sqrt(p * p / (1 + d * d)); 0 > a && (y = -y), t += y, i += d * y, u ? e.lineTo(t, i) : e.moveTo(t, i), c -= p, u = !u } }, i }(e.BaseRenderer); e.PixiRenderer = t }(box2dp || (box2dp = {})); var box2dp; !function (e) { var t = function (t) { function i(e) { t.call(this, e), this.jointVerticeCount = 0, this.quadVerticeCount = 0, this.camera = new THREE.PerspectiveCamera(45, e.width / e.height, 1, 1e4); var o = 45, r = o * (Math.PI / 180); this.camera.position.z = e.height / (2 * Math.tan(r / 2)), this.camera.lookAt(new THREE.Vector3(0, 0, 0)), this.renderer = new THREE.WebGLRenderer({ antialias: e.antialias, alpha: this.options.transparent }), this.renderer.setSize(e.width, e.height), this.options.transparent || this.options.backgroundColor && this.renderer.setClearColor(this.options.backgroundColor, 1), this.useElement.appendChild(this.renderer.domElement), this.scene = new THREE.Scene, this.container = new THREE.Object3D, this.scene.add(this.container), this.quadGraphic = new THREE.Object3D, this.jointGraphic = new THREE.Object3D, this.overGraphic = new THREE.Object3D, this.scene.add(this.quadGraphic), this.scene.add(this.overGraphic), this.scene.add(this.jointGraphic); for (var n = new THREE.Geometry, s = 0; s < i.QUAD_PT_MAX; s++) n.vertices.push(new THREE.Vector3(0, 0, 0)); this.quadLine = new THREE.LineSegments(n, this.colorClass.getLineQuadTree()), n.computeLineDistances(), this.quadGraphic.add(this.quadLine); for (var a = new THREE.Geometry, s = 0; s < i.JOINT_PT_MAX; s++) a.vertices.push(new THREE.Vector3(0, 0, 0)); this.jointLine = new THREE.LineSegments(a, this.colorClass.getLineJoint()), a.computeLineDistances(), this.jointGraphic.add(this.jointLine), this.renderer.render(this.scene, this.camera), e.invertY && this.invertYSetup(), this.psGeometries = [] } return __extends(i, t), i.prototype.invertYSetup = function () { this.container.scale.set(1, -1, 1), this.quadGraphic.scale.set(1, -1, 1), this.overGraphic.scale.set(1, -1, 1), this.jointGraphic.scale.set(1, -1, 1), this.camera.position.x = .5 * this.options.width, this.camera.position.y = this.options.height * -.5 }, i.prototype.beforeStep = function () { }, i.prototype.afterStep = function () { }, i.prototype.render = function () { var t = this.domain.items.length, o = this.jointLine.geometry; this.jointVerticeCount = 0, this.jointLastPt = null; for (var r = 0; t > r; r++) { var n = this.domain.items[r]; n.display.three && this.itemDisplayUpdate(n.display.three, n) } for (var s = 0; s < this.domain.particleSystems.length; s++) for (var a = this.domain.particleSystems[s], h = this.domain.particles[a.name], d = 0; d < h.length; d++) if (h[d].display.three) { var c = h[d].display.three; c.position.set(h[d].ix, h[d].iy, 0) } if (this.hasDrawType(e.BaseRenderer.DRAW_JOINT)) { if (this.jointLine.visible = !0, this.jointLastPt) for (var l = this.jointVerticeCount; l < i.JOINT_PT_MAX; l++) o.vertices[l].set(this.jointLastPt.x, this.jointLastPt.y, 0); o.verticesNeedUpdate = !0 } else this.jointLine.visible = !1; if (this.hasDrawType(e.BaseRenderer.DRAW_QUAD_TREE) && null != this.domain.quadTree && (this.quadGraphic.visible = !0, this.domain.quadTree.rootNode && (this.quadVerticeCount = 0, this.drawTreeNode(this.domain.quadTree.rootNode)), this.quadLine.geometry.verticesNeedUpdate = !0, this.lastQuadPt)) for (var u = this.quadVerticeCount; u < i.QUAD_PT_MAX; u++) this.quadLine.geometry.vertices[u].set(this.lastQuadPt.x, this.lastQuadPt.y, 0); this.hasDrawType(e.BaseRenderer.DRAW_QUAD_TREE) || (this.quadGraphic.visible = !1), this.renderer.render(this.scene, this.camera) }, i.prototype.drawTreeNode = function (t) { if (t.nodes.length > 0) for (var i = 0; i < t.nodes.length; i++) this.drawTreeNode(t.nodes[i]); var o = e.MakeInfo.mult30(t.x), r = e.MakeInfo.mult30(t.y), n = e.MakeInfo.mult30(t.width), s = e.MakeInfo.mult30(t.height), a = this.quadVerticeCount, h = this.quadLine.geometry; h.vertices[a].set(o, r, 0), h.vertices[a + 1].set(o + n, r, 0), h.vertices[a + 2].set(o + n, r, 0), h.vertices[a + 3].set(o + n, r + s, 0), h.vertices[a + 4].set(o + n, r + s, 0), h.vertices[a + 5].set(o, r + s, 0), h.vertices[a + 6].set(o, r + s, 0), h.vertices[a + 7].set(o, r, 0), this.lastQuadPt = new box2d.b2Vec2(o, r), this.quadVerticeCount += 8 }, i.prototype.clearOverShapes = function () { for (var e = this.overGraphic.children.length - 1; e > -1; e--) { var t = this.overGraphic.children[e]; this.overGraphic.remove(t), t.geometry && (t.geometry.dispose(), t.geometry = void 0), t.material && (t.material.dispose(), t.material = void 0) } }, i.prototype.onItemCreate = function (t) { var i = t, o = new THREE.Object3D; o.name = t.name, i.display.three = o, this.container.add(o); var r = new THREE.Object3D; r.name = "shape", o.add(r); var n = i.b2body.GetFixtureList(), s = this.colorClass.getItemStaticMat(); i.b2body.GetType() == box2d.b2BodyType.b2_dynamicBody && (s = this.colorClass.getItemDynamicMat()), t.isSensor && (s = this.colorClass.getSensorMat()); var a = this.colorClass.getLineMatStatic(); for (i.b2body.GetType() == box2d.b2BodyType.b2_dynamicBody && (a = this.colorClass.getLineMatDynamic()) ; null != n;) { switch (n.GetType()) { case box2d.b2ShapeType.e_circleShape: var h = n.GetShape(), d = e.MakeInfo.mult30(h.m_radius), c = new THREE.CircleGeometry(d, 24), l = new THREE.Mesh(c, s), u = e.MakeInfo.mult30(h.m_p.x), p = e.MakeInfo.mult30(h.m_p.y); l.position.set(u, p, 0), r.add(l); break; case box2d.b2ShapeType.e_polygonShape: var y = new THREE.Shape, m = n.GetShape(), f = e.MakeInfo.mult30(m.m_vertices[0].x), E = e.MakeInfo.mult30(m.m_vertices[0].y); y.moveTo(f, E); for (var v = 1; v < m.m_count; v++) { var b = e.MakeInfo.mult30(m.m_vertices[v].x), T = e.MakeInfo.mult30(m.m_vertices[v].y); y.lineTo(b, T) } y.lineTo(f, E); var x = new THREE.ShapeGeometry(y), C = new THREE.Mesh(x, s); r.add(C); break; case box2d.b2ShapeType.e_edgeShape: var I = new THREE.Geometry, g = n.GetShape(), A = e.MakeInfo.mult30(g.m_vertex1.x), _ = e.MakeInfo.mult30(g.m_vertex1.y), w = e.MakeInfo.mult30(g.m_vertex2.x), D = e.MakeInfo.mult30(g.m_vertex2.y); I.vertices.push(new THREE.Vector3(A, _, 0)), I.vertices.push(new THREE.Vector3(w, D, 0)); var P = new THREE.Line(I, a); r.add(P) } n = n.GetNext() } var R = e.MakeInfo.mult30(i.b2body.GetLocalCenter().x), B = e.MakeInfo.mult30(i.b2body.GetLocalCenter().y), M = new THREE.Geometry; M.vertices.push(new THREE.Vector3(R, B, 0), new THREE.Vector3(R + 8, B, 0)); var S = new THREE.Line(M, this.colorClass.getLineCenterXMat()); S.name = "clx", o.add(S), M = new THREE.Geometry, M.vertices.push(new THREE.Vector3(R, B, 0), new THREE.Vector3(R, B + 8, 0)); var S = new THREE.Line(M, this.colorClass.getLineCenterYMat()); S.name = "cly", o.add(S); var G = t.getBoundary(!0, !0); M = new THREE.Geometry, M.vertices.push(new THREE.Vector3(G.x, G.y, 0), new THREE.Vector3(G.x + G.w, G.y, 0), new THREE.Vector3(G.x + G.w, G.y + G.h, 0), new THREE.Vector3(G.x, G.y + G.h, 0), new THREE.Vector3(G.x, G.y, 0)); var L = new THREE.Line(M, this.colorClass.getLineBoundary()); L.name = "boundary", M.computeLineDistances(), o.add(L), this.itemDisplayUpdate(o, i) }, i.prototype.onItemRemove = function (e) { if (e.display && e.display.three) { var t = e.display.three; this.container.remove(t), this.disposeObj(t.getObjectByName("shape")), this.disposeObj(t), delete e.display.three } }, i.prototype.disposeObj = function (e) { for (var t = e.children.length, i = t - 1; i > -1; i--) { var o = e.children[i]; o.geometry && (o.geometry.dispose(), o.geometry = void 0), o.material && (o.material.dispose(), o.material = void 0), o.parent && o.parent.remove(o) } }, i.prototype.itemDisplayUpdate = function (t, i) { t.position.set(i.ix, i.iy, 0), t.getObjectByName("shape").rotation.set(0, 0, i.ir), t.getObjectByName("shape").visible = this.hasDrawType(e.BaseRenderer.DRAW_SHAPE), t.getObjectByName("clx").visible = this.hasDrawType(e.BaseRenderer.DRAW_CENTER), t.getObjectByName("cly").visible = this.hasDrawType(e.BaseRenderer.DRAW_CENTER), t.getObjectByName("boundary").visible = this.hasDrawType(e.BaseRenderer.DRAW_BOUNDARY); var o = i.getBoundary(!0, !0), r = t.getObjectByName("boundary"), n = r.geometry; if (n.vertices[0].set(o.x, o.y, 0), n.vertices[1].set(o.x + o.w, o.y, 0), n.vertices[2].set(o.x + o.w, o.y + o.h, 0), n.vertices[3].set(o.x, o.y + o.h, 0), n.vertices[4].set(o.x, o.y, 0), n.verticesNeedUpdate = !0, this.hasDrawType(e.BaseRenderer.DRAW_JOINT)) { var s = i.b2body.GetJointList(); if (null != s) for (var a = this.jointLine.geometry, h = s.joint; h; h = h.GetNext()) h.GetBodyA().item && h.GetBodyB().item && (this.simpleJoinDraw(h) ? (a.vertices[this.jointVerticeCount].set(h.GetBodyA().item.ix, h.GetBodyA().item.iy, 0), a.vertices[this.jointVerticeCount + 1].set(h.GetBodyB().item.ix, h.GetBodyB().item.iy, 0), this.jointLastPt = new box2d.b2Vec2(h.GetBodyB().item.ix, h.GetBodyB().item.iy), this.jointVerticeCount += 2) : h instanceof box2d.b2PulleyJoint && (a.vertices[this.jointVerticeCount].set(h.GetBodyA().item.ix, h.GetBodyA().item.iy, 0), a.vertices[this.jointVerticeCount + 1].set(e.MakeInfo.mult30(h.m_groundAnchorA.x), e.MakeInfo.mult30(h.m_groundAnchorA.y), 0), a.vertices[this.jointVerticeCount + 2].set(h.GetBodyB().item.ix, h.GetBodyB().item.iy, 0), a.vertices[this.jointVerticeCount + 3].set(e.MakeInfo.mult30(h.m_groundAnchorB.x), e.MakeInfo.mult30(h.m_groundAnchorB.y), 0), a.vertices[this.jointVerticeCount + 4].set(e.MakeInfo.mult30(h.m_groundAnchorA.x), e.MakeInfo.mult30(h.m_groundAnchorA.y), 0), a.vertices[this.jointVerticeCount + 5].set(e.MakeInfo.mult30(h.m_groundAnchorB.x), e.MakeInfo.mult30(h.m_groundAnchorB.y), 0), this.jointLastPt = new box2d.b2Vec2(e.MakeInfo.mult30(h.m_groundAnchorB.x), e.MakeInfo.mult30(h.m_groundAnchorB.y)), this.jointVerticeCount += 6)) } }, i.prototype.getXYFromCamera = function (e, t) { var i = new THREE.Vector3; i.set(e / this.options.width * 2 - 1, 2 * -(t / this.options.height) + 1, .5), i.unproject(this.camera); var o = i.sub(this.camera.position).normalize(), r = -this.camera.position.z / o.z, n = this.camera.position.clone().add(o.multiplyScalar(r)); return this.options.invertY && (n.y *= -1), n }, i.prototype.onParticleSystemCreate = function (t, i, o, r) { var n, s = new THREE.MeshBasicMaterial({ color: o, side: THREE.DoubleSide, opacity: r, transparent: !0 }), a = e.MakeInfo.mult30(t.GetRadius()); n = i == e.MakeInfo.MAKE_BOX_CENTER ? new THREE.PlaneGeometry(2 * a, 2 * a, 1, 1) : new THREE.CircleGeometry(a, 24), this.psGeometries[t.name] = { geometry: n, material: s } }, i.prototype.onParticleCreate = function (e) { var t = this.psGeometries[e.system.name].geometry, i = this.psGeometries[e.system.name].material; null != e.uniqueColor && (i = new THREE.MeshBasicMaterial({ color: e.uniqueColor, side: THREE.DoubleSide, opacity: e.uniqueAlpha, transparent: !0 })); var o = new THREE.Mesh(t, i); this.container.add(o), o.position.x = e.cx, o.position.y = e.cy, e.display.three = o }, i.prototype.onParticleDestroy = function (e) { if (e.display.three) { var t = e.display.three; this.container.remove(t), null != e.uniqueColor && t.material.dispose(), t = null } }, i.JOINT_PT_MAX = 1e5, i.QUAD_PT_MAX = 1e4, i }(e.BaseRenderer); e.ThreeRenderer = t }(box2dp || (box2dp = {}));